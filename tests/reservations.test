process.env.NODE_ENV = 'test';

const fs = require('fs')
const app = require("../app")
const chai = require('chai')
const chaiHTTP = require('chai-http')
const testVars = require('./testvars.json')
const should = chai.should()
const expect = chai.expect
const User = require('../models/User')
const Reservation = require('../models/Reservation')
const mongoose = require('mongoose')
const jwt = require('jsonwebtoken');
chai.use(chaiHTTP)

chai.use(chaiHTTP)

describe('Reservations Test', function() {
   let token = '';
  let user = new User({});

  beforeEach(() => {
    user = new User({
      password: testVars.user.password,
      email: testVars.user.email,
    });
    user.save(() => {});
    token = jwt.sign(
      {
        email: user.email,
        id: user._id
      },
      process.env.JWT_KEY,
      {
        expiresIn: "1h"
      }
    )
  });

  afterEach((done) => {
    User.deleteOne(() => {});
    mongoose.models = {};
    token = ''
    mongoose.modelSchemas = {};
    done()
  });

  it('Should return a 404 status if reservations do not exist', (done) => {
    chai.request(app)
      .get('/api/reservations')
      .set('authorization', token)
      .end((err, res) => {
        res.should.have.status(404)
        done()
      })
  })      
})
